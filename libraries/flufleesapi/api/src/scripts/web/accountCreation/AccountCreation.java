package scripts.web.accountCreation;

import org.tribot.api.General;
import org.tribot.util.Util;
import scripts.web.HTTPRequests;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.regex.Pattern;

/**
 * Created by Fluffee on 09/08/17.
 */
public class AccountCreation {

    //Wordlist numbers, the first line is line 1, not 0.
    public static final int[] WORDLIST_LINE_NUMBERS = new int[] {
            1, 27, 128, 1143, 5173, 14111, 29899, 53928, 83694, 112844, 135170, 151335, 162751
    };

    /**
     * Downloads the wordlist from my bitbucket
     *
     * @return File object of wordlist, or null if an error occurs.
     */
    public static Path downloadWordlist() {
        Path wordlist = Paths.get(Util.getWorkingDirectory() + File.separator + "FluffeeScripts" + File.separator + "TutorialIsland" + File.separator + "wordlist.txt");
        if (Files.exists(wordlist))
            return wordlist;
        try {
            HTTPRequests.downloadFile("https://bitbucket.org/teamfluffee/fluffeestutorialisland/raw/master/src/scripts/tutorialislandscript/data/wordlist.txt",
                    Util.getWorkingDirectory() + File.separator + "FluffeeScripts" + File.separator + "TutorialIsland", "wordlist.txt");
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return wordlist;
    }

    /**
     * Generates a String of a desired length by referencing the cached word list.
     * @param length - Length string generated by Fluffee's Tutorial GUI.
     * @return null if generation was unsucessful, otherwise returns the string generated.
     */
    public static String generateString(String length) {
        length = length.replace("[", "");
        length = length.replace("S", "");
        length = length.replace("]", "");
        return generateString(Integer.parseInt(length));
    }

    /**
     * Generates a String of a desired length by connecting to Jimpix.co.uk and parsing the result.
     * @param length - Length of String to generate, as int.
     * @return null if generation was unsucessful, otherwise returns the string generated.
     */
    public static String generateString(int length) {
        length = length <= 0 ? 1 : length;
        Path wordlist = downloadWordlist();
        if (wordlist == null)
            return "";
        int lineNumber = General.random(WORDLIST_LINE_NUMBERS[length-1], WORDLIST_LINE_NUMBERS[length]-1);
        try(LineNumberReader in = new LineNumberReader(new FileReader(wordlist.toString()))) {
            while (in.getLineNumber() != lineNumber-1) {
                in.readLine();
                //TODO: Improve efficiency.
            }
            return in.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return "";
    }

    /**
     * Generates a number by adding the starting number to the current account number.
     * @param numberGeneration - Number generation String as created by the Fluffee's Tutorial GUI
     * @param currentNumber - Current Account being created.
     * @return - Number generated.
     */
    public static int generateNumber (String numberGeneration, int currentNumber) {
        numberGeneration = numberGeneration.replace("[", "");
        numberGeneration = numberGeneration.replace("N", "");
        numberGeneration = numberGeneration.replace("]", "");
        return Integer.parseInt(numberGeneration) + currentNumber;
    }

    /**
     * Generates a number by adding the starting number to the current account number.
     * @param numberGeneration - Number generation String as created by the Fluffee's Tutorial GUI
     * @return - Number generated.
     */
    public static int generateNumber (String numberGeneration) {
        return generateNumber(numberGeneration, 0);
    }

    /**
     * Takes raw Arraylist from GUI and converts it into usable data.
     *
     * @param stringList - ArrayList<String> from the gui
     * @param currentAccount - Current account number being created.
     * @return - Processed arraylist with workable data.
     */
    public static ArrayList<String> processStringList(ArrayList<String> stringList, int currentAccount) {
        for (int i = 0; i < stringList.size(); i++) {
            if (stringList.get(i).contains("[S")) {
                stringList.set(i, AccountCreation.generateString(stringList.get(i)));
            }
            if (stringList.get(i).contains("[N")) {
                stringList.set(i, Integer.toString(generateNumber(stringList.get(i), currentAccount)));
            }
        }
        return stringList;
    }

    public static int getRSNLength(ArrayList<String> rsnParts, int currentAccount) {
        int length = 0;
        for (int i = 0; i < rsnParts.size(); i++) {
            if (rsnParts.get(i).contains("[S")) {
                rsnParts.set(i, rsnParts.get(i).replace("[S", "").replace("]", ""));
                try {
                    length += Integer.parseInt(rsnParts.get(i));
                } catch (NumberFormatException e) {
                    return 13;
                }
            } else if (rsnParts.get(i).contains("[N")) {
                rsnParts.set(i, rsnParts.get(i).replace("[N", "").replace("]", ""));
                try {
                    length += Integer.toString(Integer.parseInt(rsnParts.get(i)) + currentAccount).length();
                } catch (NumberFormatException e) {
                    return 13;
                }
            } else {
                length += rsnParts.get(i).length();
            }
        }
        return length;
    }

    /**
     * Get's the domain associated with the rawString, includes the @.
     * @param emailAddress - Email address to find domain of.
     * @return Domain of the address, includes the @.
     */
    public static String getDomain(String emailAddress) {
        return emailAddress.contains("@") ? emailAddress.substring(emailAddress.indexOf("@")) : "";
    }

    /**
     * Splits email or username string into pieces to allow for generation of words.
     * @param rawString Email or username with placeholders for generation
     * @return rawString split into parts, one part for each String to Generate, one with each other String, one with domain
     */
    public static ArrayList<String> stringSplitter(String rawString) {
        ArrayList<String> stringParts = new ArrayList<>();
        String emailDomain = "";
        if (rawString.contains("@")) {
            emailDomain = rawString.substring(rawString.indexOf("@"));
            rawString = rawString.substring(0, rawString.indexOf("@")); //Removes domain from rawString string to allow for easier manipulation.
        }
        while (rawString.contains("[")) {
            String tempString;
            if (rawString.indexOf("[") == 0) {
                tempString = rawString.substring(rawString.indexOf("["), rawString.indexOf("]") + 1);
            } else {
                tempString = rawString.substring(0, rawString.indexOf("["));
            }
            stringParts.add(tempString);
            rawString = rawString.replaceFirst(Pattern.quote(tempString), "");
            General.sleep(300);
        }
        if (!rawString.isEmpty()) {
            stringParts.add(rawString);
        }
        if (!emailDomain.equals("")) {
            stringParts.add(emailDomain);
        }
        return stringParts;
    }

    /**
     * Takes raw Arraylist from GUI and converts it into usable data.
     * @param stringList - ArrayList<String> from the gui
     * @return - Processed arraylist with workable data.
     */
    public static ArrayList<String> processStringList(ArrayList<String> stringList) {
        for (int i = 0; i < stringList.size(); i++) {
            if (stringList.get(i).contains("[S")) {
                stringList.set(i, AccountCreation.generateString(stringList.get(i)));
            }
            if (stringList.get(i).contains("[N")) {
                stringList.set(i, Integer.toString(generateNumber(stringList.get(i))));
            }
        }
        return stringList;
    }

    /**
     * Take ArrayList and output a String.
     * @param list ArrayList<String> to turn into a String
     * @return All contents of the list concatenated into a String.
     */
    public static String arrayListToString (ArrayList<String> list) {
        String temp = "";
        for (int i = 0; i < list.size(); i++) {
            temp = temp + list.get(i);
        }
        return temp;
    }

    /**
     * Capitalizes the first letter in a String
     * @param original - String to capitalize the first letter of.
     * @return - String with first letter capitalized.
     */
    public static String capitalizeFirstLetter(String original) {
        if (original == null || original.length() == 0) {
            return original;
        }
        return original.substring(0, 1).toUpperCase() + original.substring(1);
    }

    public static String getEmailUsername(ArrayList<String> emailParts) {
        String username = "";
        for (int i = 0; i < emailParts.size() - 1; i++) {
            username = username + emailParts.get(i);
        }
        return username;
    }
}
